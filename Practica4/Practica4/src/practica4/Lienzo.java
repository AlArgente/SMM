/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica4;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import static java.lang.Math.abs;
import static java.lang.Math.min;

/**
 *
 * @author alberto
 */
public class Lienzo extends javax.swing.JPanel {

    
    private String text_selected = null; // Texto que muestra la opción de dibujado escogida
    private Point point = new Point(0,0);
    private Point point_two = new Point(0,0);
    private boolean fill_color = false;
    private Color draw_color = Color.BLACK;
    private String draw_mode = "null";
    
    // Métodos set/get de la clase.    
    public void set_text_selected(String _text_selected){
        this.text_selected = _text_selected;
    }
    public String get_text_selected(){
        return this.text_selected;
    }
    public void set_point(Point _point){
        this.point = _point;
    }
    public Point get_point(){
        return this.point;
    }
    public void set_point2(Point _point){
        this.point_two = _point;
    }
    public Point get_point2(){
        return this.point_two;
    }
    public void set_fill_color(boolean _fill_color){
        this.fill_color = _fill_color;
    }
    public boolean get_fill_color(){
        return this.fill_color;
    }
    public void set_color(Color _draw_color){
        this.draw_color = _draw_color;
    }
    public Color get_color(){
        return this.draw_color;
    }
    public void set_draw_mode(String _draw_mode){
        this.draw_mode = _draw_mode;
    }    
    public String get_draw_mode(){
        return this.draw_mode;
    }
    public void reset_points(){
        point = new Point(-10,-10);
        point_two = point;
        
    }
    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        // this.point = evt.getPoint();
        // this.repaint(); 
    }//GEN-LAST:event_formMouseClicked

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
       
        this.point_two = evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        this.point = evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMousePressed
    @Override
    public void paint(Graphics g){
        super.paint(g);
        g.setColor(draw_color);
        if (draw_color == Color.WHITE && fill_color){
            this.setBackground(Color.BLACK);
        } else if (draw_color == Color.WHITE) {
            this.setBackground(Color.BLACK);
        } else {
            this.setBackground(Color.WHITE);
        }
        // g.fillOval(50,50,20,20);
        if(draw_mode == "point"){
            g.fillOval(point.x-10, point.y-10, 3, 3);
        } else if (draw_mode == "line"){
            g.drawLine(point.x, point.y, (point_two.x), (point_two.y));
        } else if (draw_mode == "rectangle") {
            int x = min(point_two.x, point.x);
            int y = min(point_two.y, point.y);
            int witdh = abs(point_two.x - point.x);
            int height = abs(point_two.y - point.y);
            if (!fill_color) {
                g.drawRect(x, y, witdh, height);
            } else {
                g.fillRect(x, y, witdh, height);
            }
        } else if (draw_mode == "elipse") {
            int x = min(point_two.x, point.x);
            int y = min(point_two.y, point.y);
            int witdh = abs(point_two.x - point.x);
            int height = abs(point_two.y - point.y);
            if (!fill_color) {
                g.drawOval(x, y, witdh, height);
            } else {
                g.fillOval(x, y, witdh, height);
            }
        }
        
        // g.drawLine(WIDTH, WIDTH, WIDTH, WIDTH);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
