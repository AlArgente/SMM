/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.aadcg.iu;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ComponentColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.WritableRaster;

/**
 * Clase Lienzo2DImagen que hereda de Lienzo, usada para poder abrir imágenes,
 * guardar imágenes y así poder aplicar operaciones sobre estas
 * @author alberto
 */
public class Lienzo2DImagen extends Lienzo {

    /**
     * Variable de tipo BufferedImage donde almacenaremos la imagen
     */
    private BufferedImage img;
    
    /**
     * Constructor por defecto, inicializa los componentes
     */
    public Lienzo2DImagen() {
        initComponents();
    }
    /**
     * Setter, asigna al lienzo la imagen que se le pasa por parámetro y después
     * guarda los valores del anchoy alto para así poder situar un correcto 
     * clipArea
     * @param _img Imagen que se dibujará en el lienzo
     */
    public void setImage(BufferedImage _img) {
        this.img = _img;
        if (img!=null) {
            setPreferredSize(new Dimension(img.getWidth(),img.getHeight()));
            this.set_size(img.getWidth(), img.getHeight());
        }
    } 
    /**
     * Getter
     * @return devuelve la imagen que hay en el lienzo
     */
    public BufferedImage getImage() {
        return this.img;
    }
    /**
     * Getter, método para que en caso de que hayamos pintado algo en el lienzo,
     * si vamos a guardar la imagen se guarden también
     * @param drawVector true||false, si queremos que se guarde la imagen con
     * lo que haya en el lienzo o no 
     * @return la imagen con o sin lo pintado en el lienzo
     */
    public BufferedImage getImage(boolean drawVector) {
        if (drawVector) {
            BufferedImage imgOut = new BufferedImage(img.getWidth(), img.getHeight(), img.getType());
            // Se añadirá algo cuando trabajemos con transparencias
            // Para los parámetros alfa de la imagen
            this.paint(imgOut.createGraphics());
            return imgOut;
        } else {
            return getImage();
        }
    }
    /**
     * Método que devuelve una imagen con los valores correspondientes a la banda
     * que se le pase por parámetro
     * @param src imagen de la cual obtener la banda
     * @param n_bandas la banda a obtener
     * @return imagen de la banda seleccionada
     */
    public BufferedImage getBanda(BufferedImage src, int n_bandas) {
            ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
            ComponentColorModel cm = new ComponentColorModel(cs, false, false,
                                    Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
            
            
            int bandList[] = {n_bandas};
            WritableRaster bandRaster = (WritableRaster)src.getRaster().createWritableChild(0, 0, 
                                        src.getWidth(), src.getHeight(), 0,0, bandList);
            
            BufferedImage imgBanda = new BufferedImage(cm,bandRaster,false,null);
            return imgBanda;
    }
    
    /**
     * Sobrecarga el método paintComponent, para así poder dibujar la imagen
     * en el lienzo
     * @param g Graphics g
     */
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (img != null)g.drawImage(img, 0, 0, this);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
