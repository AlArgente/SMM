/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.aadcg.iu;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import sm.aadcg.graficos.Ellipse;
import sm.aadcg.graficos.Line;
import sm.aadcg.graficos.Rectangulo;

/**
 *
 * @author alberto
 */
public class Lienzo2D extends javax.swing.JPanel {

    
    private Color _color = Color.BLACK;
    private boolean _fill = false;
    private boolean _alisar = false;
    private boolean _transparencia = false;
    private boolean _editar = false;
    private String _modo_dibujo = "punto";
    private String _text = null;
    private ArrayList<Shape> vShape = new ArrayList();
    private int _grosor = 1;
    private Point pAux = new Point();
    private Line l;
    private Rectangulo rectangle;
    private Ellipse ellipse;
    private Stroke _stroke;
    private Composite comp = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
    private RenderingHints render = new RenderingHints(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
    private Shape s;
    
    public void set_stroke(int grosor) {
        Stroke s = new BasicStroke(grosor);
        this._stroke = s;
    }
    public void set_color(Color color) {
        this._color = color;
    }
    public Color get_color() {
        return this._color;
    }
    public void set_fill(boolean fill) {
        this._fill = fill;
    }
    public boolean get_fill() {
        return this._fill;
    }
    public void set_alisar(boolean alisar) {
        this._alisar = alisar;
    }
    public boolean get_alisar() {
        return this._alisar;
    }
    public void set_transparencia(boolean transparencia) {
        this._transparencia = transparencia;
    }
    public boolean get_transparencia() {
        return this._transparencia;
    }
    public void set_editar(boolean editar) {
        this._editar = editar;
    }
    public boolean get_editar() {
        return this._editar;
    }
    public void set_modo_dibujo(String modo_dibujo) {
        this._modo_dibujo = modo_dibujo;
    }
    public String get_modo_dibujo() {
        return this._modo_dibujo;
    }
    public void set_text(String text) {
        this._text = text;
    }
    public String get_text() {
        return this._text;
    }
    public void set_paux(Point p) {
        this.pAux = p;
    }
    public Point get_paux() {
        return this.pAux;
    }
    public void set_grosor(int grosor) {
        this._grosor = grosor;
        this.set_stroke(grosor);
    }
    public float get_grosor() {
        return this._grosor;
    }
    
    /**
     * Creates new form Lienzo2D
     */
    public Lienzo2D() {
        initComponents();
        _stroke = new BasicStroke(_grosor);
        // comp = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(400, 300));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
        this.formMouseDragged(evt);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_formMouseReleased

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        if (_editar) {
            // Escogemos la figura
            s = this.getSelectedShape(evt.getPoint());
            // Guardamos las coordenadas para poder mover seg√∫n clickemos.
            this.pAux = evt.getPoint();
        } else {
            switch(this._modo_dibujo) {
                    case "punto":
                        this.createShape("punto", evt.getPoint());
                        // this.pAux = evt.getPoint();
                        this.repaint();
                        break;
                    case "linea":
                        this.createShape("linea", evt.getPoint());
                        // this.pAux = evt.getPoint();
                        break;
                    case "rectangulo": 
                        this.createShape(this._modo_dibujo, evt.getPoint());                    
                        // this.pAux = evt.getPoint();
                        break;
                    case "ellipse":
                        this.createShape(this._modo_dibujo, evt.getPoint()); 
                        // this.pAux = evt.getPoint();
                        break;
                    default:
                        this.createShape(this._modo_dibujo, evt.getPoint());
                        // this.pAux = evt.getPoint();
                        this.repaint();
                        break;
            }
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        if (this._editar) {
            if (s instanceof Line) {
                Line line = new Line();
                line = (Line)s;
                 Point actual = new Point((int)evt.getPoint().getX() - (int)this.pAux.getX(),
                        (int)evt.getY() - (int)this.pAux.getY());
                line.setLocation(actual);
                setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
            }
            if (s instanceof Rectangulo) {
                Rectangulo r = new Rectangulo();
                r = (Rectangulo)s;
                // r.setLocation(evt.getPoint());
                Point actual = new Point((int)evt.getPoint().getX() - (int)this.pAux.getX(),
                        (int)evt.getY() - (int)this.pAux.getY());
                r.setLocation(actual);
                setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
            }
            if (s instanceof Ellipse){
                Ellipse e = new Ellipse();
                e = (Ellipse)s;
                Point actual = new Point((int)evt.getPoint().getX() - (int)this.pAux.getX(),
                        (int)evt.getY() - (int)this.pAux.getY());
                e.setLocation(actual);
                setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
            }
            this.pAux = evt.getPoint();
        } else {
            switch (this._modo_dibujo) {
                case "punto":
                    this.updateShape("punto", evt.getPoint());
                    break;
                case "linea":
                    this.updateShape("linea", evt.getPoint());
                    break;
                case "rectangulo":
                    this.updateShape(this._modo_dibujo, evt.getPoint());
                    break;
                case "ellipse": 
                    this.updateShape(this._modo_dibujo, evt.getPoint());
                    break;
                default:
                    this.updateShape(this._modo_dibujo, evt.getPoint());
                    break;
            }
        }
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    public void createShape(String mode, Point p) {
        switch(this._modo_dibujo) {
                case "punto":
                    // l = new Line(p, p);
                    // vShape.add(l);
                    break;
                case "linea":
                    // l = new Line(p, p);
                    //vShape.add(l);
                    break;
                case "rectangulo": 
                    //rectangle = new Rectangulo(p.x, p.y, p.x, p.x);
                    // vShape.add(rectangle);
                    break;
                case "ellipse":
                    // ellipse = new Ellipse(p.x, p.y, p.x, p.x);
                    // vShape.add(ellipse);
                    break;
                default:

                    break;
        }
    }
    
    public void updateShape(String mode, Point p) {
        switch(this._modo_dibujo) {
                case "punto":
                    // l.setLine(this.l.getP1(), evt.getPoint());
                    // l.setLine(this.l.getP1(), this.l.getP1());
                    break;
                case "linea":
                    // l.setLine(this.l.getP1(), p);
                    break;
                case "rectangulo": 
                    // rectangle.setFrameFromDiagonal(this.rectangle.get_p1(), p);
                    break;
                case "ellipse":
                    // ellipse.setFrameFromDiagonal(this.ellipse.get_p1(), p);
                    break;
                default:

                    break;
        }
    }
    
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D)g;
        g2d.setPaint(_color);
        // _stroke = new BasicStroke(_grosor);
        g2d.setStroke(_stroke);
        for(Shape s:vShape) {
            if(_transparencia) g2d.setComposite(comp);  
            if(_fill) g2d.fill(s);
            if(_alisar) g2d.setRenderingHints(render);
            g2d.draw(s);
        }
    }
    
    private Shape getSelectedShape(Point2D p){
        for (Shape s:vShape) {
            if(s.contains(p)) return s;
        }
        return null;
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
